/* 
 * File:   main.c
 * Author: mirzahw
 *
 * Created on November 4, 2014, 12:43 PM
 */

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

typedef struct { //Defines structure Student
    // Members of structure student
    int StudentID;
    int ProjectGrade; 
    int ExamGrade; 
    float FinalGrade; 
} student;
// Declares Prototypes
student **create_class_list( char* filename, int *sizePtr );
int find_linsrch (int idNo, student **list, int size);
int find_binsrch(int idNo, student **list, int size);
void input_grades (char *filename, student **list, int size);
void compute_final_course_mark(student **list, int size);
void output_final_course_mark (char* filename, student **list, int size);
void print_backwards(student **list, int size, int invloc);
void withdraw(int idNo, student **list, int *size);
void destroy_list(student **list, int *sizePtr);
/*
 * 
 */

student **create_class_list( char* filename, int *sizePtr ){ // 
    
    int i = 0; // Used for For Loop
    int store = 0; // Temporarily stores value
    student **list = NULL;
    FILE *classlist = fopen(filename, "r"); // Opens File
    fscanf(classlist, "%d", sizePtr); // Reads File
    list = calloc(*sizePtr, sizeof (student*)); // Creates pointers to students
    for (i = 0; i < *sizePtr; i++) // Stores each Student ID in the class list
    {
        fscanf(classlist, "%d" , &store);
        list[i] = calloc(1, sizeof (student)); // Creates a pointer
        list[i]->StudentID = store;
    }
    fclose(classlist); // Closes File
    return list;
}
int find_linsrch (int idNo, student **list, int size) { // Searches for an ID
    
    int i = 0; // Used for For Loop
    for (i = 0; i < size; i++) // Goes through each value
    {
        if (list[i]->StudentID == idNo) // Checks to see if the ith value equals the ID
        {
            return i;
        }
    }
    return -1;
}
int find_binsrch(int idNo, student **list, int size) { // Searches for an ID
    
    
    int first = 0;
    int last = size - 1;
    int middle = (first + last)/2;
     
    while( first <= last) // Performs Binary search
    {
        if (list[middle]->StudentID < idNo) // Gets rid of left side
        {
            printf("The index Probed was %d.\n", middle);
            first = middle + 1;
            
        }
        else if (list[middle]->StudentID == idNo) // Checks to see if the number is the same
        {
            printf("The index Probed was %d.\n", middle);
            return middle;
        }
        else // Gets rid of the right side
        {
            last = middle - 1;
            printf("The index Probed was %d.\n", middle);
        }
        middle = (first + last) / 2; // Gets new value for middle
    }
    if (first > last) // If value was not found
    {
        return -1;
    }
}
void input_grades( char *filename, student **list, int size ) { // 
    
    int i = 0; // Used for For Loop
    int storeID = 0; // Used to store
    int store = 0; // Used to store
    FILE *gradeslist = fopen(filename, "r"); // Opens file to read
    for (i = 0; i < size; i++) // Scans through and collects the marks
    {
        fscanf(gradeslist, "%d", &storeID);
        store = find_linsrch(storeID, list, size);
        fscanf(gradeslist,"%d",&list[store]->ProjectGrade); //Stores project marks
        fscanf(gradeslist,"%d",&list[store]->ExamGrade); // Stores exam marks
    }
    fclose(gradeslist); // Closes the file
}
void compute_final_course_mark(student **list, int size) {
    
    int i = 0; // Used for For Loop
    float FinalM = 0; // Used for final mark
    for (i = 0; i < size; i++)
    {
        FinalM = (list[i]->ProjectGrade * 0.4) + (list[i]->ExamGrade * 0.6); // calculates mark
        list[i]->FinalGrade = FinalM;
    }
}
void output_final_course_mark (char* filename, student **list, int size){
    
    int i = 0; // Used for For Loop
    FILE *outputFile = fopen(filename, "w"); // Opens file to write in
    for (i = 0; i < size; i++)
    {
        fprintf(outputFile, "Student's ID: %d has a Final mark of: %f\r\n", list[i]->StudentID, list[i]->FinalGrade); // Writes in the file
    }
    fclose(outputFile); // Closes the file
}
void print_backwards(student **list, int size, int invloc){ //
    
    if (invloc != size) // Checks to see if invloc is the same as the size
    {
        print_backwards(list,size, invloc + 1); // If not it calls the function over
        printf(" %d", list[invloc]->StudentID); // Prints the invloc ID
    }
}
void withdraw(int idNo, student **list, int *size){
    
    int i = 0;
    int IDloc = find_linsrch(idNo, list, *size); // Calls find_linsrch to see where it is
    if (IDloc == -1) // Means that ID is not in the list
    {
        printf("The Student ID is not in this Class list.");
    }
    else
    {
        *size = *size - 1; //Subtracts 1 from size
        for (i = IDloc; i < *size; i++) // Pushes all values one spot back
        {
            list[i]->ExamGrade = list[i + 1]->ExamGrade;
            list[i]->FinalGrade = list[i + 1]->FinalGrade;
            list[i]->ProjectGrade = list[i + 1]->ProjectGrade;
            list[i]->StudentID = list[i + 1]->StudentID;
        }
        free(list[*size]); // Frees up the last spot
        for (i = 0; i < *size; i++)
        {
            printf("%d ", list[i]->StudentID);
        }
    }
}
void destroy_list(student **list, int *sizePtr){
    
    int i=0; // Used for For Loop
    for (i = 0; i < *sizePtr; i++) // Destroys each value in the list
    {
        free(list[i]); // Free them
    }
    free(list); // Frees the memory of the list
    *sizePtr = 0;
}
int main(int argc, char** argv) {

    // Variables used
    student **classlist;
    int *classSize;
    char* File1 = "classlist.txt" ;
    char* File2 = "grades.txt" ;
    char* File3 = "output.txt" ;

    classlist = create_class_list(File1, classSize); // Creates class list
    
    int linsrch = find_linsrch(1305004, classlist, *classSize); // Calls function find_linsrch
    printf("The location of this ID using linear search is: %d\n\n" , linsrch);
    
    int binsrch = find_binsrch(1305004, classlist, *classSize); // Calls function find_binsrch
    printf("The location of this ID using binary search is: %d\n\n" , binsrch);
    
    input_grades(File2, classlist, *classSize); // Calls function
    compute_final_course_mark(classlist, *classSize ); // Calls function
    output_final_course_mark(File3, classlist, *classSize); // Calls function
    
    printf("The class list backwards is:"); // Prints list backwards
    print_backwards(classlist, *classSize, 0); // Calls function
    
    printf("\n\nThe new class list looks like: ");
    withdraw(1305003, classlist, classSize); // Calls function
    printf("\n");
    withdraw(1305002, classlist, classSize); // Calls function
    printf("\n");
    withdraw(1305013, classlist, classSize); // Calls function
    printf("\nThe Student has been removed. The new size is %d", *classSize);
    
    destroy_list(classlist, classSize);
    printf("\n\nFinal size of list is: %d\n\n",*classSize);
    return (EXIT_SUCCESS);
}

