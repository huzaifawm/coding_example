package lab.pkg2;

public class Node<String> { // Class represents Nodes
    
    String element;
    Node<String> next;
    
    public Node(String e, Node<String> n){
       element = e;
       next = n;
    }
        
}


package lab.pkg2;
/**
 *
 * @author Mirzahw
 */

public class WordLinkedList<E> {
    
    private int listSize;
    private Node head; // Dummy node
    
    public WordLinkedList() { // Makes a new empty list
        
        head = new Node(null, null); // Creates an empty string
        listSize = 0; // Initialize size to 0
    }
    
    public WordLinkedList(String[] arrayOfWords) {
        
        head = new Node(null, null); // Creates an empty string
        listSize = 0; // Initialize size to 0
        for (int i = 0; i < arrayOfWords.length; i++) // Goes through each word of arrayOfWords
        {
            insert(arrayOfWords[i]); // Inserts each word into new list
        }
    }
    
    public int getSize() { // Makes the size of the list public
        
        return listSize;
    }
    
    public String getWordAt(int i) throws IndexOutOfBoundsException {
        
        if ((i >= listSize) || (i < 0)) // Checks to see if the index is within the range
        {
            throw new ArrayIndexOutOfBoundsException("Invalid"); // If not, returns an error message
        }
        else // If index is valid
        {
            Node<String> tracker = head.next; // Used as dummy node
            for (int j = 0; j < listSize;) // Goes through each index in the list
            {
                if (j == i) // if the index looking at is the same as the get index
                {                   
                    return tracker.element; // Returns that element     
                }
                else
                {                        
                    tracker = tracker.next; // increment the node
                    j++; // increment node
                }
            }
            return tracker.element; // returns the element of the dummy node
        }
    }
    
    public void insert(String newword){ // Insetrs a new word into the linked list
        
        if (listSize == 0) // If the list is empty new word is added to the front
        {
            head.next = new Node<>(newword,null);
            listSize = listSize + 1;
        }
        else
        {
            if (find(newword)== -1) // Checks to see if the word isn't in the list
            {
                listSize = listSize + 1; // Adds one to the size
                Node<String> tracker1 = head.next; // Node to keep track of where we are
                for (int i = 0; i < (listSize-1); i++) // Loops to add the newword
                {
                    if (newword.compareTo(tracker1.element) < 0) // Checks if the word should be in the front
                    {
                        Node temp = new Node<>(newword, tracker1); // Create a new node
                        head.next = temp;
                        return;
                    }
                    else if (tracker1.next == null && newword.compareTo(tracker1.element) > 0) // Checks if the word should be in the end
                    {
                        Node temp = new Node<>(newword, null); // Creates a new node
                        tracker1.next = temp;
                        return;
                    }
                    else if (newword.compareTo(tracker1.element) > 0 && newword.compareTo(tracker1.next.element) < 0) // If newword is somewhere in the middle
                    {
                        Node temp = new Node<>(newword, tracker1.next); // Create a new node
                        tracker1.next = temp;
                        return;
                    }
                    else // If newword is already in the list, won't ever happen
                    {
                        tracker1 = tracker1.next; // Moves the tracker
                    }   
                } 
            }
            else // Word already in list
            {
                return;
            }
        }
    }
    
    public int find(String word) { // Finds the word
        
        int loc= 0; // Location starts at 0
        Node<String> tracker = head; // Tracking node
        while (tracker.next != null) // Goes through each element in the list
        {         
            if (tracker.next.element.compareTo(word) == 0) // Checks to see if that word is the same
            {
                return loc; // If so, returns index
            }
            else
            {
                tracker = tracker.next; // Increments the node by one  
                loc++; // Increments the location by one  
            }
        }
        return -1; // If word is not in list
    }
    
    public String remove(int i) throws IndexOutOfBoundsException { // removes word
        
        if ((i >= listSize) || (i < 0)) // Checks to see if the index is valid
        {
            throw new ArrayIndexOutOfBoundsException("Invalid"); // If not, returns an error message
        }
        String temp = " ";
        Node<String> trackerF; // Tracker 1
        Node<String> trackerB = head; // Tracker 2
        int count=0;
        for (trackerF = head.next; trackerF != null; trackerF = trackerF.next)
        {
            if (count == i) // Checks to see if we're in the correct index
            {
                temp = trackerF.element; // Sets temp to the element to be removed
                if (trackerF.next != null) // Checks to see if we're not at the end
                {
                    trackerB.next = trackerF.next; // Moves the Nodes
                }
                else // Reaches the end of the list
                {
                    trackerB.next = null;   
                }
            listSize--; // Decreases the Size by 1
            return temp; 
            }
        count++; // Adds one to count
        trackerB = trackerF; // Moves the tracker Nodes
        }
        return ("Not found!");
    }
    
    public void mergeTo(WordLinkedList that){
        
        // Tracker Nodes
        Node<String> tracker1 = head.next;
        Node<String> tracker2 = that.head.next;
        Node<String> mainTracker = head.next;
        // Counters used to see words from this and that already in list
        int tracker1Index = 0;
        int tracker2Index = 0;
        int mergeSize = 0;
        if (listSize == 0) // Checks if this list is empty
        {
            head.next = that.head.next; // Transfers all the information
            listSize = that.listSize;
            that.head = null; // Empties that list
            that.listSize = 0; // Makes the size 0 for that list
            return;
        }
        else if(that.listSize == 0) // Checks if that list is empty
        {
            return; // Nothing to merge so just returns
        }
        // Checks to see which list comes first alphabetically
        if (tracker1.element.compareTo(tracker2.element) > 0) // If that comes first
        {
            head.next = that.head.next; // Sets this head to that head
            tracker2Index = tracker2Index + 1; // Adds one to that counter
            tracker2 = tracker2.next; // Moves the tracker
            mergeSize = mergeSize + 1; // Adds one to the merge size counter
        }
        else if (tracker1.element.compareTo(tracker2.element) < 0) // If this comes first
        {
            tracker1 = tracker1.next; // Moves the tracker
            tracker1Index = tracker1Index + 1; // Adds one to this counter
            mergeSize = mergeSize + 1; // Adds one to the merge size counter
        }
        else // Both lists start the same
        {
            tracker1 = tracker1.next; // Moves the tracker
            tracker2 = tracker2.next; // Moves the tracker
            tracker1Index = tracker1Index + 1; // Adds one to this counter
            tracker2Index = tracker2Index + 1; // Adds one to that counter
            mergeSize = mergeSize + 1; // Adds one to the merge size counter
        }
        mainTracker = head.next; // Assigns our main trace to the correct head
        while(tracker1Index < listSize && tracker2Index < that.listSize) // Inserts words until one list is empty
        {
            if (tracker1.element.compareTo(tracker2.element) > 0) // if that word comes next
            {
                mainTracker.next = tracker2; // Assigns the next word to that
                mainTracker = mainTracker.next; // Moves main tracer
                tracker2 = tracker2.next; // Moves that tracer
                tracker2Index = tracker2Index + 1; // Adds one to that counter
                mergeSize = mergeSize + 1; // Adds one to merge size counter
            }
            else if(tracker1.element.compareTo(tracker2.element) < 0) // if this word comes next
            {
                /*assigns next word to this, increments two counters, moves two traces along*/
                mainTracker.next = tracker1; // Assigns the next word to this
                mainTracker = mainTracker.next; // Moves main tracer
                tracker1 = tracker1.next; // Moves this tracer
                tracker1Index = tracker1Index + 1; // Adds one to this counter
                mergeSize = mergeSize + 1; // Adds one to merge size counter
            }
            else // If the words are the same
            {
                tracker1 = tracker1.next; // Moves this tracer
                tracker1Index = tracker1Index + 1; // Adds one to this counter
            }
        }
        if(listSize - tracker1Index > 0) // if there are still words left in this
        {
            mainTracker.next = tracker1; // Sets everything remaining in this to the list
            listSize = mergeSize + listSize - tracker1Index; // Adjusts size
        }
        else // if there are still words left in that
        {
            mainTracker.next = tracker2; // Sets everything remaining in that to the list
            listSize = mergeSize + that.listSize - tracker2Index; // Adjusts size
        }
        // Empties that list
        that.head = null;
        that.listSize = 0;
    }
    
    public String toString() {
        String longString = "";
	if(listSize==0)
        {
	    longString = "The list is empty";
        }
        else
        {
            Node p = head.next;
	    longString = new String("");
            for (; p.next!= null ; p = p.next)
            {
                longString =longString +  p.element + "\n";          
            }//end for
            longString =longString +  p.element; 
        }
        return longString;
    }
}