package lab5;

/**
 *
 * @author mirzahw
 */
public class BSTSet {
    
    private TNode root;
    
    public BSTSet(){ // Creates an empty tree
        
        root = null;
    }
    
    public BSTSet(int[] input){ // Creates a tree with the same values as input

       for(int i = 0; i<input.length; i++) // Goes through the array input
       {
           root = insert(input[i],root); // Adds each value in tree
       }
    }
    
    public boolean isIn(int v){ // Checks if v is in the tree
        
        int temp = 0;
        if (v == find(v,root))
        {
            temp = 1;
        }
        if (temp == 1)
        {
            return true;
        }
        else
        {
            return false; // Returns true if v is in tree
        }
    }
    
    public void add(int v){ // Adds v into this tree
        
        root = insert(v,root);
    }
    
    public boolean remove(int v){ // Removes v from this tree
        
        if(isIn(v)) // Checks to see if v is in the tree
        {
            root = delete(v,root);
            return true; // v is in tree and has been removed
        }
        else 
        {
            return false; // v is not in tree to begin with
        }
    }
    
    public BSTSet union(BSTSet s){
        
        BSTSet unionSet = new BSTSet();
        unionInsertion(root,unionSet);
        unionInsertion(s.root,unionSet);
        return unionSet;
    }
    
    public BSTSet intersection(BSTSet s){
         
        BSTSet Set = new BSTSet();
        Intersection(s.root, Set);
        return Set;
     }
    
    public int size(){
        
        return size(root);
    }
    
    public void printBSTSet(){
        
        if(root==null)
        {
            System.out.println("The set is empty");
        }
        else
        {
            System.out.print("The set elements are: ");
            printBSTSet(root);
            System.out.print("\n");
        }
    }
    
    private void printBSTSet(TNode t){
        
        if(t!=null)
        {
            printBSTSet(t.left);
            System.out.print(" " + t.element + ", ");
            printBSTSet(t.right);
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    // Methods used
    private TNode insert(int i, TNode t){

        if(t == null) // Checks to see if the tree is empty
        {
            t = new TNode(i,null,null);
        }
        else if(i < t.element) // Checks to see where i should be placed
        {
            t.left = insert(i, t.left);
        }
        else if(i > t.element) // Checks to see where i should be placed
        {
           t.right = insert(i, t.right);
        }
        else
        {
            return t;
        }
        return t;
    }

    private int find(int i,TNode t){ // Looks for i in t

        if (t != null)
        {
            if(i < t.element)
            {
                return(find(i,t.left));
            }
            if(i > t.element)
            {
                return(find(i,t.right));
            }
            else
            {
                return t.element;
            }
        }
        return 0;
    }
    
    private TNode delete(int i,TNode t){

        if(i < t.element)
        {
            t.left = delete(i,t.left);
        }
        else if(i > t.element)
        {
            t.right = delete(i,t.right);
        }
        else if(t.left != null && t.right != null)
        {
            t.element = (findMin(t.right)).element;
            t.right = removeMin(t.right);
        }
       else
        {
            t = (t.left != null) ? t.left : t.right;
        }
        return t;
    }

    private TNode findMin(TNode t){

        while(t.left != null)
        {
           t = t.left;
        }
        return t;
    }

    private TNode removeMin(TNode t){

        if(t.left != null)
        {
            t.left = removeMin(t.left);
            return t;
        }
        else
        {
            return t.right;
        }
    }

    private void unionInsertion(TNode tNew, BSTSet tOld){

        if(tNew != null)
        {
            tOld.add(tNew.element);
            unionInsertion(tNew.left,tOld);
            unionInsertion(tNew.right,tOld);
        }
    }
    
    private void Intersection(TNode t1, BSTSet set){

        if(t1 != null)
        {
            if(this.isIn(t1.element))
            {
                set.add(t1.element);
            }
            Intersection(t1.left, set);
            Intersection(t1.right, set);
        }
     }
    private int size(TNode t){

        if(t != null)
        {
            return(1 + size(t.left) + size(t.right));
        }
        else
        {
            return 0;
        }
    }
}
