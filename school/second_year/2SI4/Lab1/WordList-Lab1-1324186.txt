public class WordList {
    
    private String[] array; // Array to store size of list
    private int size; // Size of array
    private int cap; // Capacity of array
    
    public WordList(int capacity) {
        
        array = new String[capacity]; // creats a new empty array (array of zeros)
        cap = capacity;
        size = 0;
    }
    public WordList(String[] arrayOfWords) { // Read exactly what the code wants
        
        size = arrayOfWords.length; // Gets the size of the array
        cap = 2 * size; // Capacity is twice the size
        WordList newlist = new WordList(cap); // Creating a new list
        for (int i = 0; i < size; i++) // Transfers the words from arrayOrWords to newlist
        {
            newlist.insert(arrayOfWords[i]); // Inserts the word in it's appropriate location
        }
        this.size = newlist.size;
        this.array = newlist.array;
    }
    public int getSize() { // Makes the size of this array public
        
        return this.size;
    }
    public int getCapacity() { // Makes the capacity of this array public
        
        return this.cap;
    }
    public String getWordAt(int i){ // Returns the word at the index i in the array
        
        if ((i > this.size-1) || (i < 0)) // Checks to see if the index is within the array
        {
            throw new ArrayIndexOutOfBoundsException("Invalid"); // Exception
        }
        else // If it is
        {
            String wordAt = new String(); // Creates new string object
            wordAt = this.array[i]; // Gives it the value of the index i of this array
            return wordAt;
        }
    }
    public void insert(String NewWord){ // Adds a new word in this array
        
        int i; // Used to determine where the word should be inserted
        int temp;
        if (size == cap) // Checks to see if adding NewWords exceeds size
        {
            String[] bigarray = new String[2 * cap]; // If so, Creates a new array
            for (temp = 0; temp < size; temp++) // Makes the bigger array with same elements
            {
                bigarray[temp] = array[temp]; // Transfers all elements of array to bigarray
            }
            array = bigarray; // sets this array to bigarray
            cap = cap * 2; // Doubles the capacity
        }
        for (i = 0; i < size && array[i].compareTo(NewWord) < 0; i++)
        {
            // Checks to see where the new word should pe placed
            // Stops when the NewWord is smaller than the next word in the array
        }
        if (i < size && array[i].equals(NewWord)) // Checks to see if NewWord already exists in the array
        {
            return;
        }
        for (temp = size; temp > i; temp--) // Creates space for NewWord
        {
            array[temp] = array[temp - 1]; // Moves all the words forwards in array starting from the end of the array
        }
        array[i] = NewWord; // Adds NewWord
        size++; // A word added, so size must be one bigger
    }
    public int find(String word){ // Looks for the word using binary search
        
        int highNum = this.array.length-1; // Sets the high index
        int lowNum = 0; // Sets the low index
        int midNum;
        while (lowNum <= highNum) // Runs while high index value is grater than low index value
        {
            midNum = (highNum+lowNum)/2; // Sets the mid index
            if (word.compareTo(this.array[midNum]) == 0) // Checks if word is greater than mid
            {
                return midNum; // return the index word appears
            }
            if (word.compareTo(this.array[midNum]) > 0) // Checks if word is greater than mid
            {
                lowNum = midNum + 1;
            }
            else // otherwise word is smaller than mid
            {
                highNum = midNum - 1; // high index becomes mid index
            }
        }
        return -1; // return -1 if word doesn't appear in array
    }
    public void remove(String word){ // Removes value from this array
        
        if (size > 0) // Checks to see if there is anything in the list
        {
            int loc = this.find(word); // Finds index word appears
            int temp = loc; // Temporary store of loc 
            if (loc >= 0) // If words appears in the array
            {
                for (temp = loc; size > temp; temp++) 
                {
                    array[temp] = array[1+temp]; // moves all the words back one space
                }
                size--; // Reduces the size by 1
            }
        }
    }
    public WordList sublist(char init, char fin){ // Finds words with in array
        
        int count = 0; // Counts number of words between init and fin
        WordList charList = new WordList(cap); // Creates new list for words between init and fin
        if (size == 0) // Checks to see if there is anything in the array
        {
            return new WordList(this.cap); // Returns an empty list
        }
        else // Otherwise
        {
            for (int i = 0; i<size; i++) // Goes through each element in the array
            {
                if (array[i].charAt(0) >= init && array[i].charAt(0) <= fin)
                {
                    charList.insert(array[i]); // Stores words between init and fin in new list
                    count++; // Adds one to count
                }
            }
            charList.cap = charList.size * 2; // Sets the cap of new list to 2 times the size of new list
        }
        if (count == 0) // This means that there aren't any words between init and fin
        {
            return new WordList(this.cap); // Return empty list
        }
        return charList; // Returns new list of words between init and fin
    }
    public String toString() { // Prints out each word in array on a new line
        String str = ""; // Creates an empty string
        if(size == 0) // Checks to see if array is empty
        {
            str = "The list is empty";
        }
        else // Otherwise
        {
            str = array[0]; // Sets str to the first element in the array
        }
        for (int i = 1; i < size; i++)
        {
            str = str + "\n" + array[i]; // Adds a newline then next element
        }
        return str;
    }
}